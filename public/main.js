"use strict";var app=angular.module("myApp",["ui.router"]);app.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,n,t){t.html5Mode({enabled:!0,requireBase:!1}),n.otherwise("/")}]),app.controller("peopleController",["$scope","peopleFactory",function(e,n){function t(e){var n=0;for(var t in e)e.hasOwnProperty(t)&&++n;return n}function o(n){Array.isArray(n)?e.currentResults=204===n?[{id:"RECORD DELETED",name:"RECORD DELETED",favoriteCity:"RECORD DELETED"}]:n:e.currentResults=[n]}e.max=0,e.people=n.getAllPeople().then(function(n){e.max=parseInt(t(n)),console.log(e.max)}),e.currentPerson={},e.currentResults={},e.getPersons=function(n){n.id?e.getSinglePerson(e.currentPerson):e.getAllPeople()},e.getAllPeople=function(){console.log("Get all people"),n.getAllPeople().then(function(n){e.currentResults=n}).catch()},e.getSinglePerson=function(t){console.log("Get single Person",t),n.getSinglePerson(t).then(o).catch(),console.log("results",e.currentResults),e.currentPerson={}},e.postPerson=function(t){console.log("post one person",t),n.postPerson(t).then(o).catch(),console.log("results",e.currentResults),e.currentPerson={}},e.updatePerson=function(t){console.log("update one person",t),n.updatePerson(t).then(o).catch(),console.log("results",e.currentResults),e.currentPerson={}},e.deletePerson=function(t){console.log("delete one person",t),n.deletePerson(t.id).then(o).catch(),console.log("results",e.currentResults),e.currentPerson={}}}]),app.factory("peopleFactory",["$http",function(e){function n(e){return console.log("response",e),e.data}return{getAllPeople:function(){return e.get("/api/people").then(n).catch()},getSinglePerson:function(t){return e.get("/api/people/"+t.id).then(n).catch()},postPerson:function(t){return e.post("/api/people",t).then(n).catch()},updatePerson:function(t){return e.put("/api/people/"+t.id,t).then(n).catch()},deletePerson:function(t){return e.delete("/api/people/"+t.id).then(n).catch()}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
