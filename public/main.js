"use strict";var app=angular.module("myApp",["ui.router"]);app.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){n.html5Mode({enabled:!0,requireBase:!1}),t.otherwise("/")}]),app.controller("peopleController",["$scope","peopleFactory",function(e,t){function n(e){var t=0;for(var n in e)e.hasOwnProperty(n)&&++t;return t}function r(t){Array.isArray(t)?e.currentResults=t:e.currentResults=[t]}e.max=0,e.people=t.getAllPeople().then(function(t){e.max=parseInt(n(t))}),e.currentPerson={},e.currentResults={},e.getPersons=function(t){t.id?e.getSinglePerson(e.currentPerson):e.getAllPeople()},e.getAllPeople=function(){t.getAllPeople().then(function(t){e.currentResults=t}).catch()},e.getSinglePerson=function(n){t.getSinglePerson(n).then(function(t){t.id||(t={id:"No Record Found",name:"No Record Found",favoriteCity:"No Record Found"}),e.currentResults=[t]}).catch(),e.currentPerson={}},e.postPerson=function(n){t.postPerson(n).then(r).catch(),e.currentPerson={}},e.updatePerson=function(n){t.updatePerson(n).then(function(t){e.currentResults=[n]}).catch(),e.currentPerson={}},e.deletePerson=function(n){t.deletePerson(n).then(function(){e.currentResults=[{id:"RECORD DELETED",name:"RECORD DELETED",favoriteCity:"RECORD DELETED"}]}).catch(),e.currentPerson={}}}]),app.factory("peopleFactory",["$http",function(e){function t(e){return e.data}return{getAllPeople:function(){return e.get("/api/people").then(t).catch()},getSinglePerson:function(n){return e.get("/api/people/"+n.id).then(t).catch()},postPerson:function(n){return e.post("/api/people",n).then(t).catch()},updatePerson:function(n){return e.put("/api/people/"+n.id,n).then(t).catch()},deletePerson:function(n){return e.delete("/api/people/"+n.id).then(t).catch()}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
