"use strict";var app=angular.module("myApp",["ui.router"]);app.config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,n,t){t.html5Mode({enabled:!0,requireBase:!1}),n.otherwise("/")}]),app.controller("peopleController",["$scope","peopleFactory",function(e,n){function t(e){var n=0;for(var t in e)e.hasOwnProperty(t)&&++n;return n}function o(n){Array.isArray(n)?e.currentResults=n:e.currentResults=[n]}e.max=0,e.people=n.getAllPeople().then(function(n){e.max=parseInt(t(n))}),e.currentPerson={},e.currentResults={},e.getPersons=function(n){n.id?e.getSinglePerson(e.currentPerson):e.getAllPeople()},e.getAllPeople=function(){n.getAllPeople().then(function(n){e.currentResults=n}).catch()},e.getSinglePerson=function(t){n.getSinglePerson(t).then(function(n){n.id||(n={id:"No Record Found",name:"No Record Found",favoriteCity:"No Record Found"}),e.currentResults=[n]}).catch(),e.currentPerson={}},e.postPerson=function(t){n.postPerson(t).then(o).catch(),e.currentPerson={}},e.updatePerson=function(t){n.updatePerson(t).then(function(n){e.currentResults=[t]}).catch(),e.currentPerson={}},e.deletePerson=function(t){n.deletePerson(t).then(function(){e.currentResults=[{id:"RECORD DELETED",name:"RECORD DELETED",favoriteCity:"RECORD DELETED"}]}).catch(),e.currentPerson={}}}]),app.factory("peopleFactory",["$http",function(e){function n(e){return console.log(e.data),e.data}return{getAllPeople:function(){return e.get("/api/people").then(n).catch()},getSinglePerson:function(t){return console.log("sending",t),e.get("/api/people/"+t.id).then(n).catch()},postPerson:function(t){return console.log("sending",t),e.post("/api/people",t).then(n).catch()},updatePerson:function(t){return console.log("sending",t),e.put("/api/people/"+t.id,t).then(n).catch()},deletePerson:function(t){return console.log("sending",t),e.delete("/api/people/"+t.id).then(n).catch()}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
